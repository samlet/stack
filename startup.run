#!/bin/bash
. /pi/bin/inc/wait_funcs.sh
. /pi/bin/inc/matchers.sh
. /pi/bin/inc/docker_utils.sh

function start_inventory(){
	# mysqld: ready for connections.
	start_docker inventory "$msg_mysql"
}

# startup 
if [ $# -lt 1 ]; then	
	echo "available opts: all, zk, storm, repl, ..."
else
	CMD=$1
	case "$CMD" in
	"redis")
		start_docker redis "$msg_redis"
		;;
	"inventory")
		start_inventory
		;;
	"bus")
		cd compose/rabbit_ws && docker-compose up		
		;;
	"dev")
		cd compose/dev && docker-compose up		
		;;

	## ja
	"ja_backend")
		python -m sagas.backend.cabocha_backend
		;;
	"ja_c")
		python -m sagas.tests.cabocha_client
		;;
	"ja_nlu_t")
		python -m sagas.tests.ja_nlu_tests
		;;

	## cn
	"hanlp")
		hanlp serve
		;;

	## crmsfa
	"crmsfa")
	    python -m sagas.crmsfa.crmsfa_backend
	    ;;
	"odoo_c")
		python -m sagas.tests.connect_with_odoorpc.py
		;;
	"odoo_info")
		python -m sagas.crmsfa.odoo_info show-models
		;;
	"show")
		python -m sagas.crmsfa.odoo_info desc-model ${@:2}
		;;
	"movies")
		python -m sagas.ofbiz.movies_api
		;;
	"eecas")
		kafka-console-consumer --bootstrap-server $HOST_IP:9092 --topic measure.entities
		;;
	"secas")
		python -m sagas.ofbiz.tools service_logs
		;;
	"ping")
		python -m sagas.ofbiz.tools ping
		;;
	"users")
		python -m sagas.ofbiz.tools users
		;;
	"minilang_clip")
		python -m sagas.ofbiz.tools convert_minilang_from_clip
		;;
	"s-basic")
	    python -m sagas.ofbiz.rpc_basic
	    ;;
	"hybrid")
		python -m sagas.hybrid.hybrid_srv
		;;
	"srv")
		python -m sagas.ofbiz.srv
		;;
	"routines")
		python -m sagas.ofbiz.routines
		;;
	"as")
		python -m sagas.ofbiz.rpc_artifacts
		;;
	"actions")
		# python -m rasa_core_sdk.endpoint --actions actions.procs
		python -m sagas.bots.servants.endpoint --actions actions.procs
		;;
	"broker")
		python -m sagas.bots.action_broker
		;;

	"bert-multi")
		bert-serving-start -model_dir /pi/ai/bert/multi_cased_L-12_H-768_A-12/ -num_worker=1 -max_seq_len=50 -cased_tokenization
		;;
	"bert-en")
		bert-serving-start -model_dir /pi/ai/bert/uncased_L-12_H-768_A-12/ -num_worker=1 -max_seq_len=50
		;;
	"bert-zh")
		bert-serving-start -model_dir /pi/ai/bert/chinese_L-12_H-768_A-12/ -num_worker=1 -max_seq_len=50 -cased_tokenization
		;;
	"duckling")
		target_dir="$HOME/jcloud/assets/langs/workspace/data-procs/duckling/duckling"
		cd $target_dir ; stack exec duckling-example-exe
		;;
	"servant_de")
		python -m sagas.de.german_servant
		;;
	"servant_zh")
		python -m sagas.zh.chinese_servant
		;;
	"servant_nlu")
		python -m sagas.nlu.nlu_servant
		;;
	"servant_words")
		python -m sagas.nlu.words_servant
		;;
	"servant_multilang")
		python -m sagas.nlu.multilang_servant
		;;
	"tr")
		cd ../turkish/zemberek-nlp ; java -jar all/target/zemberek-full.jar StartGrpcSeer --dataRoot /pi/ai/tr/data
		;;
	*)
		# default proc
		handle_cmd ${@:1}
		;;
	esac
fi

