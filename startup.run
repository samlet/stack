#!/bin/bash
# . /pi/bin/inc/wait_funcs.sh
# . /pi/bin/inc/matchers.sh
# . /pi/bin/inc/docker_utils.sh

function start_inventory(){
	# mysqld: ready for connections.
	start_docker inventory "$msg_mysql"
}

python="$HOME/miniconda3/envs/bigdata/bin/python"
jupyter="$HOME/miniconda3/envs/bigdata/bin/jupyter"
py_rasa="$HOME/miniconda3/envs/rasa_1x/bin/python"
py_cv="$HOME/miniconda3/envs/cv/bin/python"
bert_s="$HOME/miniconda3/envs/bigdata/bin/bert-serving-start"

# startup 
if [ $# -lt 1 ]; then	
	echo "available opts: all, zk, storm, repl, ..."
else
	CMD=$1
	case "$CMD" in
	"redis")
		start_docker redis "$msg_redis"
		;;
	"inventory")
		start_inventory
		;;
	"bus")
		cd compose/rabbit_ws && docker-compose up		
		;;
	"dev")
		cd compose/dev && docker-compose up		
		;;

	## ja
	"ja_backend")
		python -m sagas.backend.cabocha_backend
		;;
	"ja_c")
		python -m sagas.tests.cabocha_client
		;;
	"ja_nlu_t")
		python -m sagas.tests.ja_nlu_tests
		;;

	## cn
	"hanlp")
		hanlp serve
		;;

	## crmsfa
	"crmsfa")
	    python -m sagas.crmsfa.crmsfa_backend
	    ;;
	"odoo_c")
		python -m sagas.tests.connect_with_odoorpc.py
		;;
	"odoo_info")
		python -m sagas.crmsfa.odoo_info show-models
		;;
	"show")
		python -m sagas.crmsfa.odoo_info desc-model ${@:2}
		;;
	"movies")
		python -m sagas.ofbiz.movies_api
		;;
	"eecas")
		kafka-console-consumer --bootstrap-server $HOST_IP:9092 --topic measure.entities
		;;
	"secas")
		python -m sagas.ofbiz.tools service_logs
		;;
	"ping")
		python -m sagas.ofbiz.tools ping
		;;
	"users")
		python -m sagas.ofbiz.tools users
		;;
	"minilang_clip")
		python -m sagas.ofbiz.tools convert_minilang_from_clip
		;;
	"s-basic")
	    python -m sagas.ofbiz.rpc_basic
	    ;;
	"hybrid")
		$python -m sagas.hybrid.hybrid_srv
		;;
	"srv")
		$python -m sagas.ofbiz.srv
		;;
	"routines")
		$python -m sagas.ofbiz.routines
		;;
	"as")
		$python -m sagas.ofbiz.rpc_artifacts
		;;
	"ofbiz")
		target_dir=$JCLOUD_HOME/vagrant/fedora/fedora-28/ofbiz/ofbiz-framework		
		cd $target_dir ; ./gradlew ofbiz -x test
		;;
	"actions")
		# python -m rasa_core_sdk.endpoint --actions actions.procs
		$python -m sagas.bots.servants.endpoint --actions actions.procs
		;;

	"note")
		# export PYTHONPATH=..:$PYTHONPATH
		$jupyter notebook
		;;

	"broker")
		$python -m sagas.bots.action_broker
		;;

	"bert-multi")
		$bert_s -model_dir /pi/ai/bert/multi_cased_L-12_H-768_A-12/ -num_worker=1 -max_seq_len=50 -cased_tokenization
		;;
	"bert-en")
		$bert_s -model_dir /pi/ai/bert/uncased_L-12_H-768_A-12/ -num_worker=1 -max_seq_len=50
		;;
	"bert-zh")
		$bert_s -model_dir /pi/ai/bert/chinese_L-12_H-768_A-12/ -num_worker=1 -max_seq_len=50 -cased_tokenization
		;;
	"duckling")
		target_dir="$HOME/jcloud/assets/langs/workspace/data-procs/duckling/duckling"
		# https://github.com/facebook/duckling/issues/85
		cd $target_dir ; stack exec duckling-example-exe -- -p 8000
		;;
	"servant_de")
		$python -m sagas.nlu.parse_servant run
		;;
	"servant_spacy")
		$py_rasa -m sagas.nlu.parse_servant run 14001
		;;
	"servant_spacy_22_dev")
		FLASK_ENV=development $py_cv -m sagas.nlu.parse_servant dev 14002
		;;
	"servant_spacy_22")
		$py_cv -m sagas.nlu.parse_servant run 14002
		;;
	"servant_zh")
		$python -m sagas.zh.chinese_servant
		;;
	"servant_nlu")
		$py_rasa -m sagas.nlu.nlu_servant
		;;
	"servant_words")
		$python -m sagas.nlu.words_servant
		;;
	"servant_multilang")
		$python -m sagas.nlu.multilang_servant
		;;
	"tr")
		cd ../turkish/zemberek-nlp ; java -jar all/target/zemberek-full.jar StartGrpcSeer --dataRoot /pi/ai/tr/data
		;;
	"nlu")
		$python -m rasa_nlu.server --path mats/nlu_multilang/projects 
		;;
	"timenlp")
		# proj_root="$HOME/jcloud/assets/langs/workspace/data-procs/Time-NLP"
		proj_root="$HOME/jcloud/vagrant/sagas/projs/timenlp"
		cd $proj_root ; mvn compiler:compile && mvn exec:java -Dexec.mainClass="com.samlet.bridge.ApplicaEntryPoint"
		;;
	"langprocs")
		# proj_root="$HOME/jcloud/assets/langs/workspace/langprocs"
		proj_root="$HOME/jcloud/vagrant/sagas/projs/langprocs"
		cd $proj_root ; mvn compiler:compile && mvn exec:java -Dexec.mainClass="com.samlet.langprocs.App"
		;;
	"backup")
		mark.sh
		udisk-backup.sh
		cat /Volumes/samlet/works/483020869ed1648c002b3c04a589a5b8e47fd960/stack/.mark
		;;
	*)
		# default proc
		handle_cmd ${@:1}
		;;
	esac
fi

